{
  "inherit": [
    "common.test_list",
    "generic_main.test_list"
  ],
  "label": "Storo right board Main Test-List",
  "constants": {
    "default_factory_server_url": "http://172.30.66.5:8080/",
    "default_timeout_secs": 200,
    "run_in": {
      "sat_duration_secs": 21600,
      "dozing_sat_duration_secs": 600
    },
    "grt": {
      "enable_zero_touch": true
    },
    "overlord": {
      "overlord_urls": [],
      "tls_no_verify": true
    },
    "wireless_services": [
      [
        "antenna_test_5G_1",
        5745,
        null
      ],
      [
        "antenna_test_1",
        2412,
        null
      ]
    ],
    "phase": "PVT",
    "smt": {
      "component_list": [
        "audio_codec",
        "cpu",
        "dram",
        "embedded_controller",
        "flash_chip",
        "storage",
        "wireless",
        "bluetooth",
        "camera_front",
        "usb_hosts"
      ]
    },
    "sd": {
      "sysfs_path": "/sys/devices/pci0000:00/0000:00:14.5/mmc_host"
    }
  },
  "options": {
    "engineering_password_sha1": "6848bf3617a2cf82bd5260a146d4a3236a20badc",
    "skipped_tests": {
      "device.factory.end_SMT": [ "SMT" ],
      "device.factory.end_FAT": [],
      "device.factory.end_RUNIN": [],
      "device.factory.end_FFT": [],
      "EVT": [
        "FAT",
        "FFT",
        "RunIn",
        "GRT",
        "GRT.EnableECWriteProtect.ExecShell",
        "GRT.EnableECWriteProtect.RebootStep",
        "GRT.GRTStart.CollectDeviceInfo",
        "GRT.EnableECWriteProtect",
        "GRT.ReSignReleaseKernel"
      ],
      "DVT": [
        "FAT",
        "FFT",
        "RunIn",
        "GRT",
        "GRT.EnableECWriteProtect.ExecShell",
        "GRT.EnableECWriteProtect.RebootStep",
        "GRT.GRTStart.CollectDeviceInfo",
        "GRT.EnableECWriteProtect",
        "GRT.ReSignReleaseKernel"
      ],
      "PVT": [
        "FAT",
        "FFT",
        "RunIn",
        "GRT",
        "GRT.EnableECWriteProtect.ExecShell",
        "GRT.EnableECWriteProtect.RebootStep",
        "GRT.GRTStart.CollectDeviceInfo",
        "GRT.EnableECWriteProtect",
        "GRT.ReSignReleaseKernel"
      ]
    },
    "waived_tests": {
      "EVT": [
      ]
    }
  },
  "definitions": {
    "SMT": {
      "locals": {
        "factory_server_url": "http://172.25.77.22:10530"
      },
      "subtests": [
        "SMTStart",
        "LED",
        "TopUSBRight",
        "TopTypeCRight",
        "LteDetect",
        "ProbeSimCardTray",
        "CheckPoint",
        "SMTEnd"
      ]
    },
    "TopUSBAndTypeCRightGroup": {
      "label": "Right USB And TypeC",
      "parallel": true,
      "subtests": [
        "TopUSBRight",
        "TopTypeCRight"
      ]
    },
    "TopUSBRight": {
      "pytest_name": "topusb",
      "label": "Manual Test Right USB",
      "args": {
        "position": "Right",
        "portindex": 1
      }
    },
    "TopTypeCRight": {
      "pytest_name": "toptypec",
      "label": "Manual Test Right TypeC",
      "args": {
         "position": "Right",
         "portindex":1
      }
    },
    "USBTypeARight": {
      "label": "Manual Test Right USB TypeA",
      "pytest_name": "topusbr1",
      "args": {
      }
    },
	"LteDetect": {
      "pytest_name": "lte_rssi_test",
	  "run_if": "device.component.has_lte",
      "label": "LTE Detect Test",
      "args": {
        "timeout": 200,
        "autostart": true,
        "only_check_presence": true,
        "loop_time": 1
      }
    },
    "WriteDRAMPartNum": {
      "pytest_name": "exec_shell",
      "label": "Write DRAM part number to EEPROM",
      "args": {
        "commands": [
          "[ -n \"$(factory device-data -g component.dram.part_num)\" ]",
          "ectool cbi set 3 \"$(factory device-data -g component.dram.part_num)\" 0"
        ]
      }
    },
    "WriteSKUID": {
      "pytest_name": "exec_shell",
      "label": "Write SKUID to EEPROM",
      "args": {
        "commands": [
          "[ -n \"$(factory device-data -g component.skuid)\" ]",
          "ectool cbi set 2 $(factory device-data -g component.skuid) 4 0"
        ]
      }
    },
    "WriteFWConfig": {
      "pytest_name": "exec_shell",
      "label": "Write FW Config to EEPROM",
      "args": {
        "commands": [
          "[ -n \"$(factory device-data -g component.fwconfig)\" ]",
          "[ -n \"$(factory device-data -g component.fwsetting)\" ]",
          "ectool cbi set 6 $(factory device-data -g component.fwconfig) $(factory device-data -g component.fwsetting)"
        ]
      }
    },
    "WriteSSFC": {
      "pytest_name": "exec_shell",
      "label": "Write SSFC to EEPROM",
      "args": {
        "commands": [
          "[ -n \"$(factory device-data -g component.ssfc)\" ]",
          "ectool cbi set 8 $(factory device-data -g component.ssfc) 4 0"
        ]
      }
    },
    "ST4Test": {
      "inherit": "ExecShell",
      "label": "TouchScreen ST4 Test",
      "run_if": "device.component.has_touchscreen",
      "args": {
        "working_dir": "/usr/local/factory/ST_Test/",
        "commands": "./MT_Test_Auto_ST4.sh"
      }
    },
    "ST5Test": {
      "inherit": "ExecShell",
      "label": "TouchScreen ST5 Test",
      "run_if": "device.component.has_touchscreen",
      "args": {
        "working_dir": "/usr/local/factory/ST_Test/",
        "commands": "./MT_Test_Auto_ST5.sh"
      }
    },
    "UpdateTouchPanelFW": {
      "inherit": "ExecShell",
      "label": "Update Touch Panel",
      "run_if": "device.component.has_touchscreen",
      "args": {
        "working_dir": "/usr/local/factory/ST_Test/",
        "commands": "./touchfw_parse_update.sh"
      }
    },
    "SMTStart": {
      "subtests": [
        "SMTScanMLB"
      ]
    },
    "SMTEnd": {
      "subtests": [
        "StationEnd",
        "CheckPoint"
      ]
    },
    "StationEnd": {
      "subtests": [
        "ShopfloorNotifyEnd",
        "Barrier"
      ]
    },
    "UpdateCr50Firmware": {
      "inherit": "TestGroup",
      "label": "Update Cr50 Firmware",
      "subtests": [
        {
          "pytest_name": "update_cr50_firmware",
          "args": {
            "firmware_file": "eval! constants.use_prepvt_cr50_firmware and '/opt/google/cr50/firmware/cr50.bin.prepvt' or None",
            "skip_prepvt_flag_check": "eval! constants.phase != 'PVT'",
            "set_recovery_request_train_and_reboot": true
          }
        },
        "ColdReset",
        {
          "pytest_name": "update_cr50_firmware",
          "label": "Check Cr50 Firmware Version",
          "args": {
            "method": "CHECK_VERSION"
          }
        }
      ]
    },
    "ColdReset": {
      "inherit": "TestGroup",
      "label": "Cold Reset",
      "subtests": [
        {
          "inherit": "ExecShell",
          "label": "EC Cold Reset",
          "args": {
            "commands": [
              "sync; sync; sync; sleep 5; ectool reboot_ec cold at-shutdown"
            ]
          }
        },
        "RebootStep"
      ]
    },
    "FATP": {
      "locals": {
        "factory_server_url": "http://192.168.1.131:15500"
      },
      "subtests": [
        "FAT",
        "FFT",
        "RunIn",
        "GRT"
      ]
    },
    "ChangeIPPort3108": {
      "pytest_name": "sync_factory_server",
      "label": "change IP PORT3108",
      "run_if": "device.component.has_rear_camera",
      "args": {
        "server_url": "http://192.168.1.131:16500"
      }
    },
    "ChangeIPPort3101": {
      "pytest_name": "sync_factory_server",
      "label": "change IP PORT3101",
      "run_if": "not device.component.has_rear_camera",
      "args": {
        "server_url": "http://192.168.1.131:15500"
      }
    },
    "StationStart": {
      "inherit": "FlattenGroup",
      "subtests": [
        "SyncFactoryServer",
        "Barrier",
        "ShopfloorNotifyStart",
        "WriteDeviceDataToVPD"
      ]
    },
    "FATPStationStart": {
      "inherit": "FlattenGroup",
      "subtests": [
        "ChangeIPPort3108",
        "ChangeIPPort3101",
        "Barrier",
        "ShopfloorNotifyStart",
        "WriteDeviceDataToVPD"
      ]
    },
    "FAT": {
      "label": "FAT(Final Assembly Test)",
      "locals": {
        "station_end_upload_report": true
      },
      "subtests": [
        "FATStart",
        "FATItems",
        "CheckPoint"
      ]
    },
    "FATStart": {
      "inherit": "FactoryTest",
      "subtests": [
        "ReadDeviceDataFromVPD",
        "StationStart",
        "GetDeviceInfo",
        "WriteDeviceDataToVPD",
        "Barrier"
      ]
    },
    "SMTCheckCBIData": {
      "pytest_name": "info_check",
      "label": "Confirm CBI Data",
      "args": {
        "autostart": true,
        "skuid_check": false,
        "dram_partnumber_check": true,
        "fw_config_check": false,
        "ssfc_check": false
      }
    },
    "FACheckCBIData": {
      "pytest_name": "info_check",
      "label": "Confirm CBI Data",
      "args": {
        "autostart": true,
        "skuid_check": true,
        "dram_partnumber_check": true,
        "fw_config_check": true,
        "ssfc_check": true
      }
    },
    "Wwantest": {
      "pytest_name": "wwan_rssi_test",
      "run_if": "device.component.has_lte and !device.component.has_rear_camera",
      "label": "Wwan Test",
      "args": {
        "timeout": 200,
        "autostart": false,
        "loop_time": 1
      }
    },
    "UpdateFirmware": {
      "label": "Update Firmware",
      "subtests": [
        {
          "pytest_name": "update_firmware",
          "args": {
            "download_from_server": true
          }
        },
        "Barrier"
      ]
    },
    "FATItems": {
      "inherit": "FlattenGroup",
      "subtests": [
        "SyncFactoryServer",
        "UpdateFirmware",
        "FWupdateColdReboot",
        "ChangeIPPort3108",
        "ChangeIPPort3101",
        "WriteHWID",
        "Barrier"
      ]
    },
    "FFT": {
      "subtests": [
        "FFTItems",
        "CheckPoint",
        "FFTEnd"
      ]
    },
    "FFTEnd": {
      "inherit": "TestGroup",
      "label": "Finish",
      "subtests": [
        "StationEndSyncFactoryServer",
        "ShopfloorNotifyEnd",
        "WriteDeviceDataToVPD",
        "Barrier"
      ]
    },
    "Bluetooth": {
      "args": {
        "average_rssi_threshold": -70.0
      }
    },
    "HWButton": {
      "inherit": "TestGroup",
      "label": "Hardware Button",
      "subtests": [
        {
          "inherit": "Button",
          "run_if": "device.component.has_rear_camera",
          "label": "Volume Down",
          "args": {
            "button_key_name": "ectool:-VOLDN_BTN_ODL",
            "button_name": "i18n! Volume Down"
          }
        },
        {
          "inherit": "Button",
          "run_if": "device.component.has_rear_camera",
          "label": "Volume Up",
          "args": {
            "button_key_name": "ectool:-VOLUP_BTN_ODL",
            "button_name": "i18n! Volume Up"
          }
        },
        {
          "inherit": "Button",
          "label": "Power Button",
          "args": {
            "device_filter": "Power Button",
            "button_key_name": "ectool:-H1_EC_PWR_BTN_ODL",
            "button_name": "i18n! Power Button"
          }
        }
      ]
    },
    "RearCamera": {
      "inherit": "CameraManual",
      "run_if": "device.component.has_rear_camera",
      "args": {
        "e2e_mode": true,
        "camera_facing": "rear"
      }
    },
    "StylusGarage": {
      "pytest_name": "stylus_garage",
      "run_if": "device.component.has_touchscreen"
    },
    "Wireless": {
      "inherit": "WirelessRadiotap",
      "args": {
        "device_name": "wlan0",
        "ignore_missing_services": true,
        "services": "eval! constants.wireless_services",
        "strength": {
          "main": -65,
          "aux": -65,
          "all": -65
        },
        "wifi_chip_type": null
      }
    },
    "Touchscreen": {
      "pytest_name": "touchscreen",
      "run_if": "device.component.has_touchscreen",
      "args": {
        "x_segments": 5,
        "y_segments": 5,
        "device_filter": "ELAN9008:00 04F3:2CA6"
      }
    },
    "ProbeSimCardTray": {
      "run_if": "device.component.has_lte",
      "pytest_name": "probe_sim_card",
      "args": {
        "timeout_secs": 120,
        "insert": true,
        "remove": true,
        "only_check_presence": false
      }
    },
    "DisableLidFunction": {
      "inherit": "ExecShell",
      "label": "Disable Lid Function",
      "args": {
        "commands": "/usr/share/vboot/bin/set_gbb_flags.sh 0x1039"
      }
    },
    "DisableLid": {
      "inherit": "ExecShell",
      "label": "Disable Lid",
      "args": {
        "commands": "ectool forcelidopen 1"
      }
    },
    "EnableLid": {
      "inherit": "ExecShell",
      "label": "Enable Lid",
      "args": {
        "commands": "ectool forcelidopen 0"
      }
    },
    "EnableLidFunction": {
      "inherit": "ExecShell",
      "label": "Enable Lid Function",
      "args": {
        "commands": "/usr/share/vboot/bin/set_gbb_flags.sh 0x39"
      }
    },
    "FFTItems": {
      "inherit": "FlattenGroup",
      "subtests": [
        "ModelSKU",
        "Probe",
        "Bluetooth",
        "FFTWifiSSIDList",
        "Wireless",
        "LidSwitch",
        "HWButton",
        "FrontCameraQRScan",
        "RearCameraQRScan",
        "FrontCameraLED",
        "RearCameraLED",
        "SDPerformance",
        "Touchpad",
        "DisplayPoint",
        "LED",
        "FAKeyboard",
        "Display",
        "Backlight",
        "Battery",
        "USBTypeAManualLeft",
        "USBTypeAManualRight",
        "TypeC1605LeftTest",
        "TypeC1605RightTest",
        "Touchscreen",
        "StylusAndGarage",
        "AudioJack",
        "SpeakerDMic",
        "SensorGroup",
        "ProximitySensor",
        "ProbeSimCardTray",
        "WwantestL850",
        "WwantestNL668",
        "VerifySN"
      ]
    },
    "Wwantest": {
      "pytest_name": "wwan_rssi_test",
      "run_if": "device.component.has_lte ",
      "label": "Wwan Test",
      "args": {
        "timeout": 200,
        "autostart": false,
        "loop_time": 1
      }
    },
    "WwantestL850": {
      "pytest_name": "wwan_rssi_test",
      "run_if": "device.component.has_lte and not device.component.has_rear_camera",
      "label": "Wwan L850 Test",
      "args": {
        "timeout": 200,
        "autostart": false,
        "loop_time": 1,
        "module_type": "L850"
      }
    },
    "WwantestNL668": {
      "pytest_name": "wwan_rssi_test",
      "run_if": "device.component.has_lte and device.component.has_rear_camera",
      "label": "Wwan NL668 Test",
      "args": {
        "timeout": 200,
        "autostart": false,
        "loop_time": 1,
        "module_type": "NL668"
      }
    },
    "ScreenRotation": {
      "label": "Screen Rotation",
      "run_if": "device.component.has_rear_camera",
      "subtests": [
        {
          "pytest_name": "tablet_mode",
          "args": {
            "prompt_flip_tablet": true
          }
        },
        {
          "pytest_name": "tablet_rotation",
          "label": "Tablet Rotation Lid-Accel",
          "args": {
            "accelerometer_location": "lid",
            "degrees_to_orientations": {
              "0": {
                "in_accel_x": 0,
                "in_accel_y": 1,
                "in_accel_z": 0
              },
              "90": {
                "in_accel_x": 1,
                "in_accel_y": 0,
                "in_accel_z": 0
              },
              "180": {
                "in_accel_x": 0,
                "in_accel_y": -1,
                "in_accel_z": 0
              },
              "270": {
                "in_accel_x": -1,
                "in_accel_y": 0,
                "in_accel_z": 0
              }
            },
            "spec_offset": [ 1.5, 1.5 ]
          }
        },
        {
          "pytest_name": "tablet_mode",
          "label": "Notebook Mode",
          "args": {
            "prompt_flip_notebook": true
          }
        }
      ]
    },
    "RebootStep1": {
      "inherit": "ExecShell",
      "label": "EC Cold Reset",
      "args": {
        "commands": [
          "sync; sync; sync; sleep 5; ectool reboot_ec cold"
        ]
      }
    },
    "ColdReboot": {
      "pytest_name": "exec_shell",
      "run_if": "device.component.fwupdate",
      "label": "ColdReboot",
      "allow_reboot": true,
      "args": {
        "commands": [
          "sync; sync; sync; sleep 5; ectool reboot_ec cold"
        ]
      }
    },
    "FWupdateColdReboot": {
      "label": "FWupdate ColdReboot",
      "allow_reboot": true,
      "subtests": [
        {
          "pytest_name": "get_info"
        },
        "ColdReboot"
      ]
    },
    "SensorGroup": {
      "label": "Sensor Tests",
      "run_if": "device.component.has_rear_camera",
      "subtests": [
        "AccelerometersGroup",
        "BaseGyroscope",
        "ScreenRotation"
      ]
    },
    "SMTWifiSSIDList": {
      "inherit": "WifiSSIDList",
      "args": {
        "event_log_name": "SMT_basic_ssid_list"
      }
    },
    "FFTWifiSSIDList": {
      "inherit": "WifiSSIDList",
      "args": {
        "event_log_name": "FFT_basic_ssid_list"
      }
    },
    "Charging9V": {
      "inherit": "USBTypeCManualCharge",
      "label": "9V Charging",
      "locals": {
        "usb_label": "Base USB TypeC Port",
        "usb": "eval! constants.typec_usb",
        "voltage": 9
      }
    },
    "ReadDeviceDataFromVPD": {
      "pytest_name": "read_device_data_from_vpd",
      "args": {
        "ro_key_map": {
          "region": "factory.region",
          "serial_number": "serials.serial_number",
          "mlb_serial_number": "serials.mlb_serial_number",
          "attested_device_id": "factory.attested_device_id"
        },
        "rw_key_map": {
          "ubind_attribute": "factory.ubind",
          "gbind_attribute": "factory.gbind"
        }
      }
    },
    "TypeC1605LeftTest": {
      "pytest_name": "TypeC1605L",
      "label": "Type1605Left Test",
      "args": {
        "python_file": "/usr/local/factory/py/test/pytests/typec1605/TC1605Tester.pyc",
        "res_path": "/usr/local/factory/py/test/pytests/typec1605/DetailResult.txt",
        "timeout_secs": 120
      }
    },
    "TypeC1605RightTest": {
      "pytest_name": "TypeC1605R",
      "label": "Type1605Right Test",
      "args": {
        "python_file": "/usr/local/factory/py/test/pytests/typec1605R/TC1605Tester.pyc",
        "res_path": "/usr/local/factory/py/test/pytests/typec1605R/DetailResult.txt",
        "timeout_secs": 120
      }
    },
    "CheckReleaseImage": {
      "pytest_name": "check_image_version",
      "__comment": "Check release image version",
      "label": "Check Release Image",
      "args": {
        "min_version": "13829.0.0",
        "check_release_image": true,
        "reimage": true,
        "require_space": true,
        "use_netboot": false
      }
    },
    "Accelerometers": {
      "pytest_name": "accelerometers",
      "args": {
        "limits": {
          "x": [ -2.0, 2.0 ],
          "y": [ -2.0, 2.0 ],
          "z": [ 8.0, 11.0 ]
        }
      }
    },
    "LidAccelerometersCalibration": {
      "inherit": "AccelerometersCalibration",
      "args": {
        "location": "lid",
        "orientation": {
          "in_accel_x": 0,
          "in_accel_y": 0,
          "in_accel_z": 1
        },
        "spec_offset": [
          2.0,
          2.0
        ]
      }
    },
    "AccelerometersGroup": {
      "label": "Accelerometers Group",
      "inherit": "FactoryTest",
      "subtests": [
        "LidAccelerometersCalibration",
        "Accelerometers"
      ]
    },
    "AudioJack": {
      "disable_services": [ "cras" ],
      "args": {
        "audio_conf": "audio_sof_storo",
        "check_dongle": true,
        "initial_actions": [
          [
            "sof-rt5682",
            "initial"
          ]
        ],
        "input_dev": [
          "sof-rt5682",
          "1"
        ],
        "output_dev": [
          "sof-rt5682",
          "1"
        ],
        "output_volume": 10,
        "require_dongle": true,
        "tests_to_conduct": [
          {
            "freq_threshold": 300,
            "rms_threshold": [
              0.08,
              null
            ],
            "type": "sinewav"
          }
        ]
      }
    },
    "Probe": {
      "args": {
        "config_file": "probe_storo_for_match_sku_components.json",
        "overridden_rules": [
          [ "audio_codec", "==", 5 ],
          [ "usb_host", "==", 2 ]
        ]
      }
    },
    "FAKeyboard": {
      "inherit": "Keyboard"
    },
    "SMTKeyboard": {
      "inherit": "Keyboard",
      "args": {
        "layout": "ANSI"
      }
    },
    "SMTProbe": {
      "pytest_name": "probe.probe",
      "label": "Probe Hardware",
      "args": {
        "component_list": "eval! constants.smt.component_list",
        "config_file": "probe_storo_for_match_sku_components.json",
        "overridden_rules": [
          [ "audio_codec", "==", 5 ],
          [ "usb_host", "==", 2 ]
        ]
      }
    },
    "LidSwitch": {
      "args": {
        "timeout_secs": 180,
        "device_filter": 0
      }
    },
    "LED": {
      "args": {
        "colors": [
          [ "BATTERY", "AMBER" ],
          [ "BATTERY", "WHITE" ],
          [ "BATTERY", "OFF" ]
        ],
        "target_leds": [ "BATTERY" ],
        "challenge": true
      }
    },
    "ProximitySensor": {
      "pytest_name": "proximity_sensor",
      "run_if": "device.component.has_lte",
      "disable_services": [
        "powerd"
      ],
      "args": {
        "device_name": "sx9310"
      }
    },
    "VerifySN": {
      "inherit": "Scan",
      "label": "Scan serial number",
      "args": {
        "check_device_data_key": "serials.serial_number",
        "event_log_key": "serial_number",
        "ignore_case": true,
        "label": "i18n! Serial Number"
      }
    },
    "USBTypeAManualTest": {
      "inherit": "TestGroup",
      "label": "Manual Test USB TypeA",
      "locals": {
        "usb": "eval! constants.typea_usb.left",
        "usb_label": "i18n! Left USB TypeA"
      },
      "subtests": [
        "USB3Performance",
        "USB2Performance"
      ]
    },
    "ExternalDisplay": {
      "pytest_name": "external_display",
      "args": {
        "main_display": "eDP-1",
        "display_info": [
          {
            "display_label": "External Display",
            "display_id": "HDMI",
            "usbpd_spec": {
              "port": 0
            }
          }
        ]
      }
    },
    "USBTypeCManualChargeItems": {
      "inherit": "FlattenGroup",
      "subtests": [
        {
          "inherit": "USBTypeCManualCharge",
          "label": "15V Charging",
          "locals": {
            "voltage": 15
          }
        }
      ]
    },
    "USBTypeCManualTest": {
      "inherit": "TestGroup",
      "label": "Manual Test USB TypeC",
      "locals": {
        "usb": "eval! constants.typec_usb.left",
        "usb_label": "i18n! Left USB TypeC"
      },
      "subtests": [
        {
          "inherit": "USBPerformance",
          "label": "USB3 CC1 Performance",
          "args": {
            "sysfs_path": "eval! locals.usb.usb3_sysfs_path",
            "usbpd_port_polarity": [
              "eval! locals.usb.usbpd_id",
              1
            ]
          }
        },
        {
          "inherit": "USBPerformance",
          "label": "USB3 CC2 Performance",
          "args": {
            "sysfs_path": "eval! locals.usb.usb3_sysfs_path",
            "usbpd_port_polarity": [
              "eval! locals.usb.usbpd_id",
              2
            ]
          }
        },
        {
          "inherit": "USBPerformance",
          "label": "USB2 Performance",
          "args": {
            "sysfs_path": "eval! locals.usb.usb2_sysfs_path"
          }
        },
        "USBTypeCManualChargeItems",
        {
          "inherit": "ExternalDisplay",
          "label": "USB3 External Display Test",
          "args": {
            "drm_sysfs_path": "eval! locals.usb.drm_sysfs_path",
            "display_info": [
              "eval! locals.usb.display_info"
            ]
          }
        },
        "Barrier"
      ]
    },
    "SpeakerDMic": {
      "pytest_name": "audio_loop",
      "disable_services": [ "cras" ],
      "args": {
        "audio_conf": "audio_sof_storo",
        "autostart": true,
        "check_dongle": true,
        "require_dongle": false,
        "initial_actions": [
          [
            "sof-rt5682",
            "initial"
          ]
        ],
        "input_dev": [
          "sof-rt5682",
          "5"
        ],
        "mic_source": "Dmic",
        "output_dev": [
          "sof-rt5682",
          "0"
        ],
        "output_volume": 20
      }
    },
    "MemoryTraining": {
      "pytest_name": "mrc_cache",
      "label": "Memory Training",
      "__comment": "DRAM Full calibration on Kukui needs to be enabled first",
      "args": {
        "mode": "create"
      }
    },
    "TouchscreenUniformity": {
      "pytest_name": "touch_uniformity",
      "label": "Touchscreen Uniformity",
      "run_if": "device.component.has_touchscreen"
    },
    "RunInItems": {
      "subtests": [
        "DisableLidFunction",
        "DisableLid",
        "CheckReleaseImage",
        "ChargerTypeDetection",
        "ChargeDischargeCurrent",
        "Probe",
        "RebootStep",
        "Barrier",
        "MemoryTraining",
        "RebootStep",
        "PartitionTable",
        "VerifyRootPartition",
        "BadBlocks",
        "BatterySysfs",
        "Battery",
        "SMTThermalLoad",
        "TouchscreenUniformity",
        "RunInStressGroupWithFrontCamera",
        "RunInStressGroupWithRearCamera",
        "RunInDozingStress",
        "Barrier",
        "RunInRebootSequence",
        "Barrier",
        "TPMVerifyEK",
        "ClearTPMOwnerRequest",
        "Barrier",
        "BlockingCharge",
        "RebootStep"
      ]
    },
    "GRTItems": {
      "inherit": "FlattenGroup",
      "subtests": [
        "UploadRegCodes",
        "ClearTPMOwnerRequest",
        "RebootStep"
      ]
    },
    "ChargeDischargeCurrent": {
      "args": {
        "max_battery_level": null
      }
    },
    "SMTItems": {
      "subtests": [
        "USBTypeAManualRight",
        "USBTypeCManualRight",
        "ProbeSimCardTray"
      ]
    },
    "Camera": {
      "args": {
        "e2e_mode": false,
        "resize_ratio": 0.7,
        "timeout_secs": 30,
        "camera_args": {
          "resolution": [
            1280,
            720
          ]
        }
      }
    },
    "FrontCamera": {
      "inherit": "CameraManual",
      "label": "Front Camera",
      "args": {
        "fullscreen": true,
        "mode": "manual",
        "num_frames_to_pass": 1,
        "camera_facing": "front"
      }
    },
    "FrontCameraLED": {
      "inherit": "FrontCamera",
      "label": "Front Camera LED",
      "args": {
        "mode": "manual_led"
      }
    },
    "FrontCameraQRScan": {
      "inherit": "FrontCamera",
      "label": "Front Camera QR Scan",
      "args": {
        "mode": "qr",
        "num_frames_to_pass": 3,
        "QR_string": "Hello ChromeOS!",
        "timeout_secs": 2000
      }
    },
    "RearCameraQRScan": {
      "inherit": "RearCamera",
      "label": "Rear Camera QR Scan",
      "args": {
        "mode": "qr",
        "num_frames_to_pass": 3,
        "QR_string": "Hello ChromeOS!",
        "e2e_mode": true,
        "timeout_secs": 2000
      }
    },
    "RunInStressGroup": {
      "subtests": [
        {
          "inherit": "WebGLAquarium",
          "args": {
            "duration_secs": "eval! constants.run_in.sat_duration_secs"
          }
        },
        {
          "inherit": "FrontCamera",
          "args": {
            "mode": "timeout",
            "timeout_secs": "eval! constants.run_in.sat_duration_secs",
            "show_image": false
          }
        },
        {
          "inherit": "URandom",
          "args": {
            "duration_secs": "eval! constants.run_in.sat_duration_secs"
          }
        },
        {
          "inherit": "StressAppTest",
          "args": {
            "seconds": "eval! constants.run_in.sat_duration_secs",
            "free_memory_only": true
          }
        },
        {
          "inherit": "RunInCountdown",
          "args": {
            "duration_secs": "eval! constants.run_in.sat_duration_secs"
          }
        }
      ]
    },
    "SMTComponents": {
      "subtests": [
        "SMTProbe",
        "BatterySysfs",
        "SMTStressAppTest",
        "SMTStressCountdown",
        "ChargerTypeDetection",
        "PartitionTable",
        "VerifyRootPartition"
      ]
    }
  }
}
