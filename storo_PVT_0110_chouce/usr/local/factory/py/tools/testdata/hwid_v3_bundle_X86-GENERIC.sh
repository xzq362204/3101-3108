#!/bin/sh
#
# Copyright 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# This is a self-extraction package for ChromeOS HWID.
# Syntax: $0 [stateful_partition_device]

START_DIR="$(pwd)"
MOUNT_DIR=""
TARGET_BASE_MOUNT="dev_image/factory"
TARGET_BASE_LIVE="/usr/local/factory"
TARGET_NAME="hwid"

on_exit() {
  cd "$START_DIR"
  if [ -d "$MOUNT_DIR" ]; then
    sudo umount "$MOUNT_DIR" || true
    rmdir "$MOUNT_DIR" || true
  fi
}

die() {
  echo "ERROR: $*" 1>&2
  exit 1
}

die_usage() {
  die "Usage: $0 [stateful_partition_device_or_folder]"
}

setup_target() {
  local target_dir=""
  local recreate_folder="TRUE"

  case "$#" in
    0 )
      target_dir="$TARGET_BASE_LIVE/$TARGET_NAME"
      echo "Updating live image path $target_dir..."
      ;;
    1 )
      local state_dev="$1"
      if [ -b "$state_dev" ]; then
        echo "Updating to stateful partition $state_dev..."
        MOUNT_DIR="$(mktemp -d /tmp/hwid_XXXXXXXX)"
        sudo mount "$state_dev" "$MOUNT_DIR" || die "Failed to mount."
        target_dir="$MOUNT_DIR/$TARGET_BASE_MOUNT/$TARGET_NAME"
      elif [ -d "$state_dev" ]; then
        echo "Updating to folder $state_dev..."
        target_dir="$state_dev"
        # This is usually for manually debugging so don't remove existing files
        recreate_folder=""
      else
        die_usage
      fi
      ;;
    * )
      die_usage
      ;;
  esac

  if [ -n "$recreate_folder" ]; then
    # For a valid target, the parent folder should alread exist.
    if [ ! -d "$(dirname "$target_dir")" ]; then
      die "Invalid target ($target_dir). Missing required folders."
    fi
    # Now, update $target_dir
    sudo rm -rf "$target_dir" || die "Failed to erase $target_dir"
    sudo mkdir -p "$target_dir" || die "Failed to mkdir $target_dir"
  fi

  # Move to $target_dir for file extraction
  cd "$target_dir"
}

set -e
trap on_exit EXIT
setup_target "$@"

# force shar to overwrite files
set -- "-c"

# ----- Following data is generated by shar -----
#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.7).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `#!/bin/sh' line above, then type `sh FILE'.
#
lock_dir=_sh28311
# Made on 2014-06-30 17:15 CST by <jsalz@jsalz-z620.tpe.corp.google.com>.
# Source directory was `/tmp/tmp.a9LmK5difN'.
#
# Existing files will *not* be overwritten, unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#   8743 -rw-r--r-- X86-GENERIC
#
MD5SUM=${MD5SUM-md5sum}
f=`${MD5SUM} --version | egrep '^md5sum .*(core|text)utils'`
test -n "${f}" && md5check=true || md5check=false
${md5check} || \
  echo 'Note: not verifying md5sums.  Consider installing GNU coreutils.'
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    case `$dir/gettext --version 2>&1 | sed 1q` in
      *GNU*) gettext_dir=$dir ;;
    esac
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null
then if (echo -n test; echo 1,2,3) | grep n >/dev/null
     then shar_n= shar_c='
'
     else shar_n=-n shar_c= ; fi
else shar_n= shar_c='\c' ; fi
f=shar-touch.$$
st1=200112312359.59
st2=123123592001.59
st2tr=123123592001.5 # old SysV 14-char limit
st3=1231235901

if touch -am -t ${st1} ${f} >/dev/null 2>&1 && \
   test ! -f ${st1} && test -f ${f}; then
  shar_touch='touch -am -t $1$2$3$4$5$6.$7 "$8"'

elif touch -am ${st2} ${f} >/dev/null 2>&1 && \
   test ! -f ${st2} && test ! -f ${st2tr} && test -f ${f}; then
  shar_touch='touch -am $3$4$5$6$1$2.$7 "$8"'

elif touch -am ${st3} ${f} >/dev/null 2>&1 && \
   test ! -f ${st3} && test -f ${f}; then
  shar_touch='touch -am $3$4$5$6$2 "$8"'

else
  shar_touch=:
  echo
  ${echo} 'WARNING: not restoring timestamps.  Consider getting and'
  ${echo} 'installing GNU `touch'\'', distributed in GNU coreutils...'
  echo
fi
rm -f ${st1} ${st2} ${st2tr} ${st3} ${f}
#
if test ! -d ${lock_dir}
then : ; else ${echo} 'lock directory '${lock_dir}' exists'
  exit 1
fi
if mkdir ${lock_dir}
then ${echo} 'x - created lock directory `'${lock_dir}\''.'
else ${echo} 'x - failed to create lock directory `'${lock_dir}\''.'
  exit 1
fi
# ============= X86-GENERIC ==============
if test -f 'X86-GENERIC' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING X86-GENERIC (file already exists)'
else
${echo} 'x - extracting X86-GENERIC (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'X86-GENERIC' &&
checksum: a09dd89f4dbbea8fc659f1d47101c8b460235029
X
board: X86-GENERIC
X
encoding_patterns:
X  0: default
X  1: new pattern
X
image_id:
X  0: EVT
X  1: DVT
X  2: PVT
X  3: MP
X
pattern:
X  - image_ids: [0, 1]
X    encoding_scheme: base32
X    fields:
X    - audio_codec: 1
X    - battery: 2
X    - bluetooth: 0
X    - camera: 0
X    - cellular: 1
X    - cpu: 1                  # 5 bits
X    - display_panel: 0
X    - dram: 1
X    - keyboard: 1
X    - cpu: 1
X    - storage: 2              # 10 bits
X    - cpu: 1
X    - firmware: 1             # 12 bits
X
X  - image_ids: [2, 3]
X    encoding_scheme: base8192
X    fields:
X    - audio_codec: 1
X    - battery: 2
X    - bluetooth: 0
X    - camera: 0
X    - cellular: 1
X    - cpu: 1                  # 5 bits
X    - display_panel: 0
X    - dram: 1
X    - keyboard: 1
X    - cpu: 1
X    - storage: 2              # 10 bits
X    - cpu: 1
X    - firmware: 1             # 12 bits
X
encoded_fields:
X  audio_codec:
X    0:
X      audio_codec: [codec_0, hdmi_0]
X    1:
X      audio_codec: [codec_1, hdmi_1]
X  battery:
X    0:
X      battery: battery_small
X    1:
X      battery: battery_medium
X    2:
X      battery: battery_large
X    3:
X      battery: battery_huge
X  bluetooth:
X    0:
X      bluetooth: bluetooth_0
X  camera:
X    0:
X      camera: camera_0
X  cellular:
X    0:
X      cellular: NULL
X    1:
X      cellular: cellular_0
X  cpu:
X    0:
X      cpu: cpu_0
X    1:
X      cpu: cpu_1
X    2:
X      cpu: cpu_2
X    3:
X      cpu: cpu_3
X    4:
X      cpu: cpu_4
X    5:
X      cpu: cpu_5
X  display_panel:
X    0:
X      display_panel: display_panel_0
X  dram:
X    0:
X      dram: dram_0
X    1:
X      dram: dram_1
X  ec_flash_chip:
X    0:
X      ec_flash_chip: ec_flash_chip_0
X  embedded_controller:
X    0:
X      embedded_controller: embedded_controller_0
X  flash_chip:
X    0:
X      flash_chip: flash_chip_0
X  keyboard:
X    0:
X      keyboard: keyboard_us
X    1:
X      keyboard: keyboard_gb
X  storage:
X    0:
X      storage: storage_0
X    1:
X      storage: storage_1
X    2:
X      storage: storage_2
X  firmware:
X    0:
X      hash_gbb: hash_gbb_0
X      key_recovery: key_recovery_0
X      key_root: key_root_0
X      ro_ec_firmware: ro_ec_firmware_0
X      ro_main_firmware: ro_main_firmware_0
X    1:
X      hash_gbb: hash_gbb_0
X      key_recovery: key_recovery_0
X      key_root: key_root_0
X      ro_ec_firmware: ro_ec_firmware_0
X      ro_main_firmware: ro_main_firmware_1
X
components:
X  audio_codec:
X    items:
X      codec_0:
X        values: { compact_str: Codec 0 }
X
X      codec_1:
X        values: { compact_str: Codec 1 }
X
X      hdmi_0:
X        values: { compact_str: HDMI 0 }
X
X      hdmi_1:
X        values: { compact_str: HDMI 1 }
X
X  battery:
X    items:
X      battery_small:
X        values:
X          tech: Battery Li-ion
X          size: '2500000'
X
X      battery_medium:
X        values:
X          tech: Battery Li-ion
X          size: '5000000'
X
X      battery_large:
X        values:
X          tech: Battery Li-ion
X          size: '7500000'
X
X      battery_huge:
X        values:
X          tech: Battery Li-ion
X          size: '10000000'
X
X  bluetooth:
X    items:
X      bluetooth_0:
X        values:
X          idVendor: '0123'
X          idProduct: abcd
X          bcd: '0001'
X
X  camera:
X    items:
X      camera_0:
X        values:
X          idVendor: '4567'
X          idProduct: abcd
X          name: Camera
X
X  cellular:
X    items:
X      cellular_0:
X        values:
X          idVendor: 89ab
X          idProduct: abcd
X          name: Cellular Card
X
X  cpu:
X    items:
X      cpu_0:
X        values:
X          name: CPU @ 1.80GHz
X          cores: '4'
X
X      cpu_1:
X        values:
X          name: CPU @ 2.00GHz
X          cores: '4'
X
X      cpu_2:
X        values:
X          name: CPU @ 2.20GHz
X          cores: '4'
X
X      cpu_3:
X        values:
X          name: CPU @ 2.40GHz
X          cores: '4'
X
X      cpu_4:
X        values:
X          name: CPU @ 2.60GHz
X          cores: '4'
X
X      cpu_5:
X        values:
X          name: CPU @ 2.80GHz
X          cores: '4'
X
X  display_panel:
X    probeable: False
X    items:
X      display_panel_0:
X        values: NULL
X
X  dram:
X    items:
X      dram_0:
X        values:
X          vendor: DRAM 0
X          size: 4G
X
X      dram_1:
X        values:
X          vendor: DRAM 1
X          size: 4G
X
X  ec_flash_chip:
X    items:
X      ec_flash_chip_0:
X        values: { compact_str: EC Flash Chip }
X
X  embedded_controller:
X    items:
X      embedded_controller_0:
X        values: { compact_str: Embedded Controller }
X
X  flash_chip:
X    items:
X      flash_chip_0:
X        values: { compact_str: Flash Chip }
X
X  keyboard:
X    probeable: False
X    items:
X      keyboard_gb:
X        values: NULL
X        labels:
X          layout: GB
X
X      keyboard_us:
X        values: NULL
X        labels:
X          layout: US
X
X  storage:
X    items:
X      storage_0:
X        values:
X          type: SSD
X          size: 16G
X          serial: '#123456'
X        labels:
X          technology: SSD
X          size: 16G
X
X      storage_1:
X        values:
X          type: SSD
X          size: 32G
X          serial: '#123456'
X        labels:
X          technology: SSD
X          size: 32G
X
X      storage_2:
X        values:
X          type: HDD
X          size: 500G
X          serial: '#123456'
X        labels:
X          technology: HDD
X          size: 500G
X
X  hash_gbb:
X    items:
X      hash_gbb_0:
X        values: { compact_str: gv2#hash_gbb_0 }
X
X  key_recovery:
X    items:
X      key_recovery_0:
X        values: { compact_str : kv3#key_recovery_0 }
X
X  key_root:
X    items:
X      key_root_0:
X        values: { compact_str: kv3#key_root_0 }
X
X  ro_ec_firmware:
X    items:
X      ro_ec_firmware_0:
X        values: { compact_str: ev2#ro_ec_firmware_0 }
X
X  ro_main_firmware:
X    items:
X      ro_main_firmware_0:
X        values: { compact_str: mv2#ro_main_firmware_0 }
X      ro_main_firmware_1:
X        status: deprecated
X        values: { compact_str: mv2#ro_main_firmware_1 }
X
rules:
- name: device_info.set_image_id
X  evaluate: SetImageId('MP')
X
- name: device_info.component.has_cellular
X  when: GetDeviceInfo('component.has_cellular')
X  evaluate: SetComponent('cellular', 'cellular_0')
X  otherwise: SetComponent('cellular', None)
X
- name: device_info.component.keyboard
X  evaluate: >
X      SetComponent(
X          'keyboard', LookupMap(GetDeviceInfo('component.keyboard'), {
X              'us': 'keyboard_us',
X              'gb': 'keyboard_gb'
X          }))
X
- name: device_info.component.dram
X  evaluate: >
X      SetComponent(
X          'dram', LookupMap(GetDeviceInfo('component.dram'), {
X              'foo': 'dram_0',
X              'bar': 'dram_1'
X          }))
X
- name: device_info.component.audio_codec
X  evaluate: >
X      SetComponent(
X          'audio_codec', LookupMap(GetDeviceInfo('component.audio_codec'), {
X              'set_0': ['codec_0', 'hdmi_0'],
X              'set_1': ['codec_1', 'hdmi_1']
X          }))
X
- name: verify.components.rule_1
X  when: ComponentEq('audio_codec', 'Codec 1') and
X        ComponentEq('audio_codec', 'HDMI 1')
X  evaluate:
X  - Assert(ComponentEq('battery', 'battery_huge'))
X  - Assert(ComponentEq('hash_gbb', 'hash_gbb_0'))
X  - Assert(ComponentEq('key_recovery', 'key_recovery_0'))
X  - Assert(ComponentEq('key_root', 'key_root_0'))
X  - Assert(ComponentEq('ro_ec_firmware', 'ro_ec_firmware_0'))
X  - Assert(ComponentEq('ro_main_firmware', 'ro_main_firmware_0'))
X
- name: verify.components.rule_3
X  when: ComponentEq('dram', 'dram_0') and ComponentEq('cellular', 'cellular_0')
X  evaluate:
X  - Assert(ComponentEq('battery', 'huge_battery'))
X  - Assert(ComponentIn('cpu', ['cpu_1', 'cpu_2']))
X
- name: verify.components.rule_4
X  when: not ComponentEq('cpu', None)
X  evaluate:
X  - Assert(ComponentEq('storage', ['SSD', '16G']))
X  - Assert((not ComponentEq('battery', 'battery_small')) or
X           (ComponentIn('cpu', ['cpu_1', 'cpu_2', 'cpu_3'])))
X
- name: verify.components.rule_5
X  when: not ComponentEq('cpu', None)
X  evaluate: Assert(ComponentEq('storage', 'SSD') or
X                   ComponentEq('storage', '16G'))
X
- name: verify.components.rule_6
X  evaluate: Assert(ComponentEq('storage', 'SSD') or
X                   ComponentEq('storage', '16G'))
X
- name: verify.sku.us
X  evaluate: >
X      ComponentEq('audio_codec', ['hdmi_1', 'codec_1']) and
X      ComponentEq('cpu', 'cpu_5') and
X      ComponentEq('battery', 'battery_huge') and
X      ComponentEq('keyboard', 'US') and
X      ComponentEq('storage', ['SSD', '16G'])
X
- name: verify.sku.gb
X  evaluate: >
X      ComponentEq('audio_codec', ['hdmi_1', 'codec_1']) and
X      ComponentEq('cpu', 'cpu_4') and
X      ComponentEq('battery', 'battery_medium') and
X      ComponentEq('keyboard', 'GB') and
X      ComponentEq('storage', ['HDD', '500G'])
SHAR_EOF
  (set 20 14 06 30 17 15 45 'X86-GENERIC'; eval "$shar_touch") &&
  chmod 0644 'X86-GENERIC'
if test $? -ne 0
then ${echo} 'restore of X86-GENERIC failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'X86-GENERIC: MD5 check failed'
       ) << \SHAR_EOF
3f8273914536b05931d75d19660bb9e5  X86-GENERIC
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'X86-GENERIC'` -ne 8743 && \
  ${echo} 'restoration warning:  size of X86-GENERIC is not 8743'
  fi
fi
if rm -fr ${lock_dir}
then ${echo} 'x - removed lock directory `'${lock_dir}\''.'
else ${echo} 'x - failed to remove lock directory `'${lock_dir}\''.'
  exit 1
fi
exit 0
